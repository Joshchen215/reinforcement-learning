{
 "cells": [
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-07-23T16:08:47.066222Z",
     "start_time": "2025-07-23T16:08:46.301210Z"
    }
   },
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "class GridWorld:\n",
    "\n",
    "    def __init__(self, reward_wall=-5):\n",
    "        # initialize grid with 2d numpy array\n",
    "        # >0: goal\n",
    "        # -1: wall/obstacles\n",
    "        # 0: non-terminal\n",
    "        self._grid = np.array(\n",
    "            [[0, 0, 0, 0, 0, -1, 0, 0],\n",
    "             [0, 0, 0, -1, 0, 0, 0, 5],\n",
    "             [0, 0, 0, -1, -1, 0, 0, 0],\n",
    "             [0, 0, 0, -1, -1, 0, 0, 0],\n",
    "             [0, 0, 0, 0, 0, 0, 0, 0],\n",
    "             [0, 0, 0, 0, 0, 0, 0, 0],\n",
    "             [0, 0, 0, 0, 0, 0, 0, 0]\n",
    "             ])\n",
    "        # wall around the grid, padding grid with -1\n",
    "        self._grid_padded = np.pad(self._grid, pad_width=1, mode='constant', constant_values=-1)\n",
    "        self._reward_wall = reward_wall\n",
    "\n",
    "        # set start state\n",
    "        self._start_state = (1, 1)\n",
    "        self._random_start = False\n",
    "\n",
    "        # store position of goal states and non-terminal states\n",
    "        idx_goal_state_y, idx_goal_state_x = np.nonzero(self._grid > 0)\n",
    "        self._goal_states = [(idx_goal_state_y[i], idx_goal_state_x[i]) for i in range(len(idx_goal_state_x))]\n",
    "\n",
    "        idx_non_term_y, idx_non_term_x = np.nonzero(self._grid == 0)\n",
    "        self._non_term_states = [(idx_non_term_y[i], idx_non_term_x[i]) for i in range(len(idx_non_term_x))]\n",
    "\n",
    "        # store the current state in the padded grid\n",
    "        self._state_padded = (self._start_state[0] + 1, self._start_state[1] + 1)\n",
    "\n",
    "    def get_state_num(self):\n",
    "        # get the number of states (total_state_number) in the grid, note: the wall/obstacles inside the grid are\n",
    "        # counted as state as well\n",
    "        return np.prod(np.shape(self._grid))\n",
    "\n",
    "    def get_state_grid(self):\n",
    "\n",
    "        state_grid = np.multiply(np.reshape(np.arange(self.get_state_num()), self._grid.shape), self._grid >= 0) - (\n",
    "                self._grid == -1)\n",
    "\n",
    "        return state_grid, np.pad(state_grid, pad_width=1, mode='constant', constant_values=-1)\n",
    "\n",
    "    def get_current_state(self):\n",
    "        # get the current state as an integer from 0 to total_state_number-1\n",
    "        y, x = self._state_padded\n",
    "        return (y - 1) * self._grid.shape[1] + (x - 1)\n",
    "\n",
    "    def int_to_state(self, int_obs):\n",
    "        # convert an integer from 0 to total_state_number-1 to the position on the non-padded grid\n",
    "        x = int_obs % self._grid.shape[1]\n",
    "        y = int_obs // self._grid.shape[1]\n",
    "        return y, x\n",
    "\n",
    "    def reset(self):\n",
    "        # reset the gridworld\n",
    "        if self._random_start:\n",
    "            # randomly start at a non-terminal state\n",
    "            idx_start = np.random.randint(len(self._non_term_states))\n",
    "            start_state = self._non_term_states[idx_start]\n",
    "            self._state_padded = (start_state[0] + 1, start_state[1] + 1)\n",
    "        else:\n",
    "            # start at the designated start_state\n",
    "            self._state_padded = (self._start_state[0] + 1, self._start_state[1] + 1)\n",
    "\n",
    "    def step(self, action):\n",
    "        # take one step according to the action\n",
    "        # input: action (integer between 0 and 3)\n",
    "        # output: reward           reward of this action\n",
    "        #         terminated       1 if reaching the terminal state, 0 otherwise\n",
    "        #         next_state       next state after this action, integer from 0 to total_state_number-1)\n",
    "        y, x = self._state_padded\n",
    "\n",
    "        if action == 0:  # up\n",
    "            new_state_padded = (y - 1, x)\n",
    "        elif action == 1:  # right\n",
    "            new_state_padded = (y, x + 1)\n",
    "        elif action == 2:  # down\n",
    "            new_state_padded = (y + 1, x)\n",
    "        elif action == 3:  # left\n",
    "            new_state_padded = (y, x - 1)\n",
    "        else:\n",
    "            raise ValueError(\"Invalid action: {} is not 0, 1, 2, or 3.\".format(action))\n",
    "\n",
    "        new_y, new_x = new_state_padded\n",
    "        if self._grid_padded[new_y, new_x] == -1:  # wall/obstacle\n",
    "            reward = self._reward_wall\n",
    "            new_state_padded = (y, x)\n",
    "        elif self._grid_padded[new_y, new_x] == 0:  # non-terminal cell\n",
    "            reward = 0.\n",
    "        else:  # a goal\n",
    "            reward = self._grid_padded[new_y, new_x]\n",
    "            self.reset()\n",
    "            terminated = 1\n",
    "            return reward, terminated, self.get_current_state()\n",
    "\n",
    "        terminated = 0\n",
    "        self._state_padded = new_state_padded\n",
    "        return reward, terminated, self.get_current_state()\n",
    "\n",
    "    def plot_grid(self, plot_title=None):\n",
    "        # plot the grid\n",
    "        plt.figure(figsize=(5, 5),dpi=200)\n",
    "        plt.imshow(self._grid_padded <= -1, cmap='binary', interpolation=\"nearest\")\n",
    "        ax = plt.gca()\n",
    "        ax.grid(0)\n",
    "        plt.xticks([])\n",
    "        plt.yticks([])\n",
    "\n",
    "        if plot_title:\n",
    "            plt.title(plot_title)\n",
    "\n",
    "        plt.text(\n",
    "            self._start_state[1] + 1, self._start_state[0] + 1,\n",
    "            r\"$\\mathbf{S}$\", ha='center', va='center')\n",
    "        for goal_state in self._goal_states:\n",
    "            plt.text(\n",
    "                goal_state[1] + 1, goal_state[0] + 1,\n",
    "                \"{:d}\".format(self._grid[goal_state[0], goal_state[1]]), ha='center', va='center')\n",
    "        h, w = self._grid_padded.shape\n",
    "        for y in range(h - 1):\n",
    "            plt.plot([-0.5, w - 0.5], [y + 0.5, y + 0.5], '-k', lw=2)\n",
    "        for x in range(w - 1):\n",
    "            plt.plot([x + 0.5, x + 0.5], [-0.5, h - 0.5], '-k', lw=2)\n",
    "\n",
    "    def plot_state_values(self, state_values, value_format=\"{:.1f}\",plot_title=None):\n",
    "        # plot the state values\n",
    "        # input: state_values     (total_state_number, )-numpy array, state value function\n",
    "        #        plot_title       str, title of the plot\n",
    "        plt.figure(figsize=(5, 5),dpi=200)\n",
    "        plt.imshow((self._grid_padded <= -1) + (self._grid_padded > 0) * 0.5, cmap='Greys', vmin=0, vmax=1)\n",
    "        ax = plt.gca()\n",
    "        ax.grid(0)\n",
    "        plt.xticks([])\n",
    "        plt.yticks([])\n",
    "\n",
    "        if plot_title:\n",
    "            plt.title(plot_title)\n",
    "\n",
    "        for (int_obs, state_value) in enumerate(state_values):\n",
    "            y, x = self.int_to_state(int_obs)\n",
    "            if (y, x) in self._non_term_states:\n",
    "                plt.text(x + 1, y + 1, value_format.format(state_value), ha='center', va='center')\n",
    "\n",
    "        h, w = self._grid_padded.shape\n",
    "        for y in range(h - 1):\n",
    "            plt.plot([-0.5, w - 0.5], [y + 0.5, y + 0.5], '-k', lw=2)\n",
    "        for x in range(w - 1):\n",
    "            plt.plot([x + 0.5, x + 0.5], [-0.5, h - 0.5], '-k', lw=2)\n",
    "\n",
    "    def plot_policy(self, policy, plot_title=None):\n",
    "        # plot a deterministic policy\n",
    "        # input: policy           (total_state_number, )-numpy array, contains action as integer from 0 to 3\n",
    "        #        plot_title       str, title of the plot\n",
    "        action_names = [r\"$\\uparrow$\", r\"$\\rightarrow$\", r\"$\\downarrow$\", r\"$\\leftarrow$\"]\n",
    "        plt.figure(figsize=(5, 5),dpi=200)\n",
    "        plt.imshow((self._grid_padded <= -1) + (self._grid_padded > 0) * 0.5, cmap='Greys', vmin=0, vmax=1)\n",
    "        ax = plt.gca()\n",
    "        ax.grid(0)\n",
    "        plt.xticks([])\n",
    "        plt.yticks([])\n",
    "\n",
    "        if plot_title:\n",
    "            plt.title(plot_title)\n",
    "\n",
    "        for (int_obs, action) in enumerate(policy):\n",
    "            y, x = self.int_to_state(int_obs)\n",
    "            if (y, x) in self._non_term_states:\n",
    "                action_arrow = action_names[action]\n",
    "                plt.text(x + 1, y + 1, action_arrow, ha='center', va='center')\n",
    "    # Transition Function, return reward and transition probability\n",
    "    def transition(self, action):\n",
    "        if action == 0:  # up\n",
    "            anchor_state_padded = (0, 1)\n",
    "        elif action == 1:  # right\n",
    "            anchor_state_padded = (1, 2)\n",
    "        elif action == 2:  # down\n",
    "            anchor_state_padded = (2, 1)\n",
    "        elif action == 3:  # left\n",
    "            anchor_state_padded = (1, 0)\n",
    "        else:\n",
    "            raise ValueError(\"Invalid action: {} is not 0, 1, 2, or 3.\".format(action))\n",
    "\n",
    "        state_num = self.get_state_num()\n",
    "        h, w = self._grid.shape\n",
    "        y_a, x_a = anchor_state_padded\n",
    "        reward = np.multiply(self._grid_padded[y_a:y_a + h, x_a:x_a + w],self._grid==0)\n",
    "\n",
    "        state_grid, state_grid_padded = self.get_state_grid()\n",
    "        next_state = state_grid_padded[y_a:y_a + h, x_a:x_a + w]\n",
    "        next_state = np.multiply(state_grid, next_state == -1) + np.multiply(next_state, next_state > -1)\n",
    "        next_state[self._grid == -1] = -1\n",
    "        next_state[self._grid > 0] = state_grid[self._grid > 0]\n",
    "\n",
    "        next_state_vec = next_state.flatten()\n",
    "        state_vec = state_grid.flatten()\n",
    "\n",
    "        probability = np.zeros((state_num, state_num))\n",
    "        probability[state_vec[state_vec > -1], next_state_vec[state_vec > -1]] = 1\n",
    "        return reward.flatten(), probability\n",
    "    \n",
    "    # Value Iteration Algorithm\n",
    "    def value_iteration(self, gamma,eps = 1e-5,\n",
    "        max_iter= 2000):\n",
    "    # input: \n",
    "    #         gamma,     (float 0-1) discount of the return\n",
    "    #         eps,       (float) stopping criteria\n",
    "    #         max_iter,  (int) maximum number of iteration\n",
    "    # output: \n",
    "    #         optim value,  (1d numpy array, float) optimal value function \n",
    "    #         optim_policy, (1d numpy array, int {0,1,2,3}) optimal policy\n",
    "\n",
    "        \n",
    "        policy = []\n",
    "        \n",
    "        v = np.zeros((self.get_state_num(),))\n",
    "        \n",
    "        for _ in range(max_iter):\n",
    "            \n",
    "            # Policy Update\n",
    "            q = np.zeros((self.get_state_num(),4))  # q(s,a)\n",
    "\n",
    "            for action in range(4):\n",
    "                    reward, tran_prob = self.transition(action)\n",
    "                    q[:,action] = reward+gamma* np.matmul(tran_prob,v)\n",
    "        \n",
    "            policy = np.argmax(q,axis=1)\n",
    "            \n",
    "            # Value Update\n",
    "            v_tmp = np.max(q,axis = 1) # v_{k+1}(s) = max_a q_k(s,a)\n",
    "            if np.linalg.norm(v_tmp-v) < eps:\n",
    "                break\n",
    "            else:\n",
    "                v = v_tmp\n",
    "            \n",
    "        \n",
    "        optim_value = v\n",
    "        optim_policy = policy\n",
    "        \n",
    "\n",
    "        return optim_value, optim_policy\n",
    "    \n",
    "    # Policy Iteration Algorithm\n",
    "    def policy_iteration(self,gamma=0.9,max_it=1000,tol=1e-5):\n",
    "        \n",
    "        # stochastic policy\n",
    "        stochastic_mat = np.random.rand(self.get_state_num(),4)\n",
    "        pi = stochastic_mat / stochastic_mat.sum(axis=1)[:,None] # pi(a|s) \n",
    "        policy = np.argmax(pi,axis=1)\n",
    "        \n",
    "        \n",
    "        for _ in range(max_it):\n",
    "\n",
    "            # Policy Evaluation\n",
    "            v = np.zeros((self.get_state_num(),))\n",
    "            for _ in range(max_it):\n",
    "                value_temp = np.zeros((self.get_state_num(),))\n",
    "                for action in range(4):\n",
    "                    reward, tran_prob = self.transition(action)\n",
    "                    value_temp = value_temp + pi[:,action]*(reward+gamma* np.matmul(tran_prob,v))\n",
    "                if np.linalg.norm(value_temp-v)<tol:\n",
    "                    break\n",
    "                else:\n",
    "                    v = value_temp\n",
    "\n",
    "            v_final = v\n",
    "        \n",
    "            # Policy Improvement\n",
    "            q = np.zeros((self.get_state_num(),4)) # q(s,a)\n",
    "            for action in range(4):\n",
    "                    reward, tran_prob = self.transition(action)\n",
    "                    q[:,action] = reward+gamma* np.matmul(tran_prob,v_final)\n",
    "            now_policy = np.argmax(q,axis=1)\n",
    "            \n",
    "            # check if policy is stable\n",
    "            if np.array_equal(policy,now_policy):\n",
    "                optimal_policy = policy\n",
    "                optimal_v = v_final\n",
    "                break\n",
    "            else:\n",
    "                policy = now_policy\n",
    "                pi = np.zeros((self.get_state_num(),4))\n",
    "                pi[np.arange(self.get_state_num()),policy] = 1 # greedy policy\n",
    "        \n",
    "        return optimal_v,optimal_policy"
   ],
   "outputs": [],
   "execution_count": 1
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-23T16:09:39.523551Z",
     "start_time": "2025-07-23T16:09:39.499021Z"
    }
   },
   "cell_type": "code",
   "source": "env = GridWorld()",
   "id": "ccee2e01466fe3e5",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-23T16:09:46.852846Z",
     "start_time": "2025-07-23T16:09:46.241466Z"
    }
   },
   "cell_type": "code",
   "source": "env.plot_grid()",
   "id": "42b55487485d3baf",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 3
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-23T16:10:43.522651Z",
     "start_time": "2025-07-23T16:10:43.493057Z"
    }
   },
   "cell_type": "code",
   "source": "optim_value, optim_policy = env.value_iteration(0.9)",
   "id": "10811faa77972e79",
   "outputs": [],
   "execution_count": 5
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-23T16:11:29.340422Z",
     "start_time": "2025-07-23T16:11:29.032330Z"
    }
   },
   "cell_type": "code",
   "source": "env.plot_policy(optim_policy)",
   "id": "56913fb137dd404b",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 7
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-23T16:12:21.326902Z",
     "start_time": "2025-07-23T16:12:21.050772Z"
    }
   },
   "cell_type": "code",
   "source": "env.plot_state_values(optim_value)",
   "id": "d56f30e7072bda52",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 8
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "",
   "id": "ad67b6dd038d2b36"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
